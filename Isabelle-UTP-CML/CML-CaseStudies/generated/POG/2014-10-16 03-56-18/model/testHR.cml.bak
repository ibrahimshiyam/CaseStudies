types
EMP = nat   
EMPDETAIL = nat 
response = bool

st_nat::
x: nat
y: nat

channels
input : nat
output : int

process proc1 =
begin
state
	a: st_nat := mk_st_nat(0,0)
	inv a.x=a.y 
	
	b: st_nat := mk_st_nat(0,0)
	inv a.x=a.y 
	
	d:nat :=1
	e:nat :=1
	
	reg : set of nat :={0,1}
	
	pred1 : set of st_nat := {}
		

functions 
	resetv : st_nat -> bool
	resetv(f) == f.x = 0 and f.y =0

	mkv : nat -> st_nat
	mkv(v) ==  mk_st_nat(v,v) 

operations
   Init : () ==> ()
   Init() ==
      reg := {}

LIFT: st_nat ==> ()
   LIFT(v1) == pred1 := pred1 union {v1}
   
   
actions
MkPred1 =  LIFT(mkv(0))
MkPred2 = LIFT(mkv(1))
MkP = MkPred1 ; MkPred2

Outme = output!3 -> Skip ; Skip

@  MkP
end



